name: Build and Release

on:
  push:
    branches: [master]

env:
  APP_NAME: "Asteroids"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y clang lld

      - name: Determine Runtime Identifier
        id: runtime
        shell: bash
        run: |
          case "${{ runner.os }}" in
            Linux)  echo "RID=linux-${{ matrix.arch }}" >> $GITHUB_ENV ;;
            macOS)  echo "RID=osx-${{ matrix.arch }}" >> $GITHUB_ENV ;;
            Windows) echo "RID=win-${{ matrix.arch }}" >> $GITHUB_ENV ;;
          esac

      - name: Publish application
        run: |
          dotnet publish -c Release -f net8.0 -r ${{ env.RID }} --self-contained true \
          -p:UseLLDLinker=true \
          -o ./.build/${{ env.RID }}/

      - name: Package application (Linux/macOS)
        if: runner.os != 'Windows'
        run: zip -r ./.build/${{ env.APP_NAME }}_${{ env.RID }}.zip ./.build/${{ env.RID }}/

      - name: Package application (Windows)
        if: runner.os == 'Windows'
        run: Compress-Archive -Path ./.build/${{ env.RID }}/* -DestinationPath ./.build/${{ env.APP_NAME }}_${{ env.RID }}.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}_${{ env.RID }}
          path: ./.build/${{ env.APP_NAME }}_${{ env.RID }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git user
        run: |
          git config --global user.name "${{ secrets.USER_NAME }}"
          git config --global user.email "${{ secrets.USER_EMAIL }}"

      - name: Get current version
        run: |
          VERSION=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' Directory.Build.props)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Increment version
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH + 1))
          if [[ "$PATCH" -gt 9 ]]; then
            PATCH=0
            MINOR=$((MINOR + 1))
          fi
          if [[ "$MINOR" -gt 9 ]]; then
            MINOR=0
            MAJOR=$((MAJOR + 1))
          fi
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          sed -i "s/$VERSION/$NEW_VERSION/" Directory.Build.props

      - name: Commit new version
        run: |
          git add Directory.Build.props
          git commit -S -m "Bump version to $NEW_VERSION"
          git push origin master

      - name: Create new tag
        run: |
          git tag -s "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: "v${{ env.NEW_VERSION }}"
          name: "Release v${{ env.NEW_VERSION }}"
          body: "ðŸš€ New release v${{ env.NEW_VERSION }} available!"
          files: ./artifacts/**/*
